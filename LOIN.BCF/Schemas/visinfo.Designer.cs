// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.0.0.47. www.xsd2code.com
//    <NameSpace>LOIN.BCF</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>NetCore</CodeBaseTag><InitializeFields>None</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><sspEnumType>True</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace LOIN.BCF
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class VisualizationInfo
    {

        #region Private fields
        private Components _components;

        private OrthogonalCamera _orthogonalCamera;

        private PerspectiveCamera _perspectiveCamera;

        private List<Line> _lines;

        private List<ClippingPlane> _clippingPlanes;

        private List<VisualizationInfoBitmap> _bitmap;

        private string _guid;

        private static XmlSerializer serializer;
        #endregion

        public Components Components
        {
            get
            {
                return this._components;
            }
            set
            {
                this._components = value;
            }
        }

        public OrthogonalCamera OrthogonalCamera
        {
            get
            {
                return this._orthogonalCamera;
            }
            set
            {
                this._orthogonalCamera = value;
            }
        }

        public PerspectiveCamera PerspectiveCamera
        {
            get
            {
                return this._perspectiveCamera;
            }
            set
            {
                this._perspectiveCamera = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public List<Line> Lines
        {
            get
            {
                return this._lines;
            }
            set
            {
                this._lines = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public List<ClippingPlane> ClippingPlanes
        {
            get
            {
                return this._clippingPlanes;
            }
            set
            {
                this._clippingPlanes = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Bitmap")]
        public List<VisualizationInfoBitmap> Bitmap
        {
            get
            {
                return this._bitmap;
            }
            set
            {
                this._bitmap = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                this._guid = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(VisualizationInfo));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Lines should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLines()
        {
            return Lines != null && Lines.Count > 0;
        }

        /// <summary>
        /// Test whether ClippingPlanes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeClippingPlanes()
        {
            return ClippingPlanes != null && ClippingPlanes.Count > 0;
        }

        /// <summary>
        /// Test whether Bitmap should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBitmap()
        {
            return Bitmap != null && Bitmap.Count > 0;
        }

        /// <summary>
        /// Test whether Components should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComponents()
        {
            return (_components != null);
        }

        /// <summary>
        /// Test whether OrthogonalCamera should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrthogonalCamera()
        {
            return (_orthogonalCamera != null);
        }

        /// <summary>
        /// Test whether PerspectiveCamera should be serialized
        /// </summary>
        public virtual bool ShouldSerializePerspectiveCamera()
        {
            return (_perspectiveCamera != null);
        }

        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VisualizationInfo object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an VisualizationInfo object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output VisualizationInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VisualizationInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out VisualizationInfo obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static VisualizationInfo Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((VisualizationInfo)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static VisualizationInfo Deserialize(System.IO.Stream s)
        {
            return ((VisualizationInfo)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current VisualizationInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an VisualizationInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VisualizationInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VisualizationInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out VisualizationInfo obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static VisualizationInfo LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Components
    {

        #region Private fields
        private ViewSetupHints _viewSetupHints;

        private List<Component> _selection;

        private ComponentVisibility _visibility;

        private List<ComponentColoringColor> _coloring;

        private static XmlSerializer serializer;
        #endregion

        public ViewSetupHints ViewSetupHints
        {
            get
            {
                return this._viewSetupHints;
            }
            set
            {
                this._viewSetupHints = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public List<Component> Selection
        {
            get
            {
                return this._selection;
            }
            set
            {
                this._selection = value;
            }
        }

        public ComponentVisibility Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                this._visibility = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("Color", IsNullable = false)]
        public List<ComponentColoringColor> Coloring
        {
            get
            {
                return this._coloring;
            }
            set
            {
                this._coloring = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Components));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Selection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSelection()
        {
            return Selection != null && Selection.Count > 0;
        }

        /// <summary>
        /// Test whether Coloring should be serialized
        /// </summary>
        public virtual bool ShouldSerializeColoring()
        {
            return Coloring != null && Coloring.Count > 0;
        }

        /// <summary>
        /// Test whether ViewSetupHints should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewSetupHints()
        {
            return (_viewSetupHints != null);
        }

        /// <summary>
        /// Test whether Visibility should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVisibility()
        {
            return (_visibility != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Components object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Components object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Components object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Components obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Components);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Components obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Components Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Components)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Components Deserialize(System.IO.Stream s)
        {
            return ((Components)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Components object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Components object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Components object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Components obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Components);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Components obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Components LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ViewSetupHints
    {

        #region Private fields
        private bool _shouldSerializeOpeningsVisible;

        private bool _shouldSerializeSpaceBoundariesVisible;

        private bool _shouldSerializeSpacesVisible;

        private bool _spacesVisible;

        private bool _spaceBoundariesVisible;

        private bool _openingsVisible;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SpacesVisible
        {
            get
            {
                return this._spacesVisible;
            }
            set
            {
                this._spacesVisible = value;
                _shouldSerializeSpacesVisible = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SpaceBoundariesVisible
        {
            get
            {
                return this._spaceBoundariesVisible;
            }
            set
            {
                this._spaceBoundariesVisible = value;
                _shouldSerializeSpaceBoundariesVisible = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool OpeningsVisible
        {
            get
            {
                return this._openingsVisible;
            }
            set
            {
                this._openingsVisible = value;
                _shouldSerializeOpeningsVisible = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ViewSetupHints));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether SpacesVisible should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSpacesVisible()
        {
            if (_shouldSerializeSpacesVisible)
            {
                return true;
            }
            return (_spacesVisible != default(bool));
        }

        /// <summary>
        /// Test whether SpaceBoundariesVisible should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSpaceBoundariesVisible()
        {
            if (_shouldSerializeSpaceBoundariesVisible)
            {
                return true;
            }
            return (_spaceBoundariesVisible != default(bool));
        }

        /// <summary>
        /// Test whether OpeningsVisible should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOpeningsVisible()
        {
            if (_shouldSerializeOpeningsVisible)
            {
                return true;
            }
            return (_openingsVisible != default(bool));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ViewSetupHints object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ViewSetupHints object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ViewSetupHints object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ViewSetupHints obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ViewSetupHints);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ViewSetupHints obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ViewSetupHints Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ViewSetupHints)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ViewSetupHints Deserialize(System.IO.Stream s)
        {
            return ((ViewSetupHints)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ViewSetupHints object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ViewSetupHints object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ViewSetupHints object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ViewSetupHints obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ViewSetupHints);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ViewSetupHints obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ViewSetupHints LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClippingPlane
    {

        #region Private fields
        private Point _location;

        private Direction _direction;

        private static XmlSerializer serializer;
        #endregion

        public Point Location
        {
            get
            {
                return this._location;
            }
            set
            {
                this._location = value;
            }
        }

        public Direction Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                this._direction = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ClippingPlane));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Location should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLocation()
        {
            return (_location != null);
        }

        /// <summary>
        /// Test whether Direction should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDirection()
        {
            return (_direction != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ClippingPlane object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ClippingPlane object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ClippingPlane object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ClippingPlane obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClippingPlane);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ClippingPlane obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ClippingPlane Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ClippingPlane)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ClippingPlane Deserialize(System.IO.Stream s)
        {
            return ((ClippingPlane)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ClippingPlane object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ClippingPlane object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ClippingPlane object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ClippingPlane obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClippingPlane);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ClippingPlane obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ClippingPlane LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Point
    {

        #region Private fields
        private bool _shouldSerializeZ;

        private bool _shouldSerializeY;

        private bool _shouldSerializeX;

        private double _x;

        private double _y;

        private double _z;

        private static XmlSerializer serializer;
        #endregion

        public double X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
                _shouldSerializeX = true;
            }
        }

        public double Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
                _shouldSerializeY = true;
            }
        }

        public double Z
        {
            get
            {
                return this._z;
            }
            set
            {
                this._z = value;
                _shouldSerializeZ = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Point));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether X should be serialized
        /// </summary>
        public virtual bool ShouldSerializeX()
        {
            if (_shouldSerializeX)
            {
                return true;
            }
            return (_x != default(double));
        }

        /// <summary>
        /// Test whether Y should be serialized
        /// </summary>
        public virtual bool ShouldSerializeY()
        {
            if (_shouldSerializeY)
            {
                return true;
            }
            return (_y != default(double));
        }

        /// <summary>
        /// Test whether Z should be serialized
        /// </summary>
        public virtual bool ShouldSerializeZ()
        {
            if (_shouldSerializeZ)
            {
                return true;
            }
            return (_z != default(double));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Point object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Point object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Point object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Point obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Point);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Point obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Point Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Point)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Point Deserialize(System.IO.Stream s)
        {
            return ((Point)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Point object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Point object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Point object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Point obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Point);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Point obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Point LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Direction
    {

        #region Private fields
        private bool _shouldSerializeZ;

        private bool _shouldSerializeY;

        private bool _shouldSerializeX;

        private double _x;

        private double _y;

        private double _z;

        private static XmlSerializer serializer;
        #endregion

        public double X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
                _shouldSerializeX = true;
            }
        }

        public double Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
                _shouldSerializeY = true;
            }
        }

        public double Z
        {
            get
            {
                return this._z;
            }
            set
            {
                this._z = value;
                _shouldSerializeZ = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Direction));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether X should be serialized
        /// </summary>
        public virtual bool ShouldSerializeX()
        {
            if (_shouldSerializeX)
            {
                return true;
            }
            return (_x != default(double));
        }

        /// <summary>
        /// Test whether Y should be serialized
        /// </summary>
        public virtual bool ShouldSerializeY()
        {
            if (_shouldSerializeY)
            {
                return true;
            }
            return (_y != default(double));
        }

        /// <summary>
        /// Test whether Z should be serialized
        /// </summary>
        public virtual bool ShouldSerializeZ()
        {
            if (_shouldSerializeZ)
            {
                return true;
            }
            return (_z != default(double));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Direction object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Direction object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Direction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Direction obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Direction);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Direction obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Direction Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Direction)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Direction Deserialize(System.IO.Stream s)
        {
            return ((Direction)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Direction object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Direction object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Direction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Direction obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Direction);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Direction obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Direction LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Line
    {

        #region Private fields
        private Point _startPoint;

        private Point _endPoint;

        private static XmlSerializer serializer;
        #endregion

        public Point StartPoint
        {
            get
            {
                return this._startPoint;
            }
            set
            {
                this._startPoint = value;
            }
        }

        public Point EndPoint
        {
            get
            {
                return this._endPoint;
            }
            set
            {
                this._endPoint = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Line));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether StartPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStartPoint()
        {
            return (_startPoint != null);
        }

        /// <summary>
        /// Test whether EndPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEndPoint()
        {
            return (_endPoint != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Line object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Line object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Line object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Line obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Line);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Line obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Line Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Line)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Line Deserialize(System.IO.Stream s)
        {
            return ((Line)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Line object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Line object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Line object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Line obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Line);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Line obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Line LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PerspectiveCamera
    {

        #region Private fields
        private bool _shouldSerializeFieldOfView;

        private Point _cameraViewPoint;

        private Direction _cameraDirection;

        private Direction _cameraUpVector;

        private double _fieldOfView;

        private static XmlSerializer serializer;
        #endregion

        public Point CameraViewPoint
        {
            get
            {
                return this._cameraViewPoint;
            }
            set
            {
                this._cameraViewPoint = value;
            }
        }

        public Direction CameraDirection
        {
            get
            {
                return this._cameraDirection;
            }
            set
            {
                this._cameraDirection = value;
            }
        }

        public Direction CameraUpVector
        {
            get
            {
                return this._cameraUpVector;
            }
            set
            {
                this._cameraUpVector = value;
            }
        }

        public double FieldOfView
        {
            get
            {
                return this._fieldOfView;
            }
            set
            {
                this._fieldOfView = value;
                _shouldSerializeFieldOfView = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PerspectiveCamera));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FieldOfView should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFieldOfView()
        {
            if (_shouldSerializeFieldOfView)
            {
                return true;
            }
            return (_fieldOfView != default(double));
        }

        /// <summary>
        /// Test whether CameraViewPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraViewPoint()
        {
            return (_cameraViewPoint != null);
        }

        /// <summary>
        /// Test whether CameraDirection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraDirection()
        {
            return (_cameraDirection != null);
        }

        /// <summary>
        /// Test whether CameraUpVector should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraUpVector()
        {
            return (_cameraUpVector != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PerspectiveCamera object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PerspectiveCamera object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PerspectiveCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PerspectiveCamera obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PerspectiveCamera);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PerspectiveCamera obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PerspectiveCamera Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PerspectiveCamera)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PerspectiveCamera Deserialize(System.IO.Stream s)
        {
            return ((PerspectiveCamera)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PerspectiveCamera object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PerspectiveCamera object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PerspectiveCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PerspectiveCamera obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PerspectiveCamera);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PerspectiveCamera obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PerspectiveCamera LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrthogonalCamera
    {

        #region Private fields
        private bool _shouldSerializeViewToWorldScale;

        private Point _cameraViewPoint;

        private Direction _cameraDirection;

        private Direction _cameraUpVector;

        private double _viewToWorldScale;

        private static XmlSerializer serializer;
        #endregion

        public Point CameraViewPoint
        {
            get
            {
                return this._cameraViewPoint;
            }
            set
            {
                this._cameraViewPoint = value;
            }
        }

        public Direction CameraDirection
        {
            get
            {
                return this._cameraDirection;
            }
            set
            {
                this._cameraDirection = value;
            }
        }

        public Direction CameraUpVector
        {
            get
            {
                return this._cameraUpVector;
            }
            set
            {
                this._cameraUpVector = value;
            }
        }

        public double ViewToWorldScale
        {
            get
            {
                return this._viewToWorldScale;
            }
            set
            {
                this._viewToWorldScale = value;
                _shouldSerializeViewToWorldScale = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OrthogonalCamera));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ViewToWorldScale should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewToWorldScale()
        {
            if (_shouldSerializeViewToWorldScale)
            {
                return true;
            }
            return (_viewToWorldScale != default(double));
        }

        /// <summary>
        /// Test whether CameraViewPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraViewPoint()
        {
            return (_cameraViewPoint != null);
        }

        /// <summary>
        /// Test whether CameraDirection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraDirection()
        {
            return (_cameraDirection != null);
        }

        /// <summary>
        /// Test whether CameraUpVector should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraUpVector()
        {
            return (_cameraUpVector != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrthogonalCamera object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an OrthogonalCamera object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrthogonalCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OrthogonalCamera obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrthogonalCamera);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OrthogonalCamera obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static OrthogonalCamera Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OrthogonalCamera)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OrthogonalCamera Deserialize(System.IO.Stream s)
        {
            return ((OrthogonalCamera)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OrthogonalCamera object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OrthogonalCamera object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrthogonalCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OrthogonalCamera obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrthogonalCamera);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OrthogonalCamera obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static OrthogonalCamera LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ComponentVisibility
    {

        #region Private fields
        private bool _shouldSerializeDefaultVisibility;

        private List<Component> _exceptions;

        private bool _defaultVisibility;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false)]
        public List<Component> Exceptions
        {
            get
            {
                return this._exceptions;
            }
            set
            {
                this._exceptions = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DefaultVisibility
        {
            get
            {
                return this._defaultVisibility;
            }
            set
            {
                this._defaultVisibility = value;
                _shouldSerializeDefaultVisibility = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ComponentVisibility));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Exceptions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeExceptions()
        {
            return Exceptions != null && Exceptions.Count > 0;
        }

        /// <summary>
        /// Test whether DefaultVisibility should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDefaultVisibility()
        {
            if (_shouldSerializeDefaultVisibility)
            {
                return true;
            }
            return (_defaultVisibility != default(bool));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ComponentVisibility object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ComponentVisibility object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ComponentVisibility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ComponentVisibility obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ComponentVisibility);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ComponentVisibility obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ComponentVisibility Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ComponentVisibility)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ComponentVisibility Deserialize(System.IO.Stream s)
        {
            return ((ComponentVisibility)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ComponentVisibility object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ComponentVisibility object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ComponentVisibility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ComponentVisibility obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ComponentVisibility);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ComponentVisibility obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ComponentVisibility LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Component
    {

        #region Private fields
        private string _originatingSystem;

        private string _authoringToolId;

        private string _ifcGuid;

        private static XmlSerializer serializer;
        #endregion

        public string OriginatingSystem
        {
            get
            {
                return this._originatingSystem;
            }
            set
            {
                this._originatingSystem = value;
            }
        }

        public string AuthoringToolId
        {
            get
            {
                return this._authoringToolId;
            }
            set
            {
                this._authoringToolId = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "normalizedString")]
        public string IfcGuid
        {
            get
            {
                return this._ifcGuid;
            }
            set
            {
                this._ifcGuid = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Component));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether OriginatingSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOriginatingSystem()
        {
            return !string.IsNullOrEmpty(OriginatingSystem);
        }

        /// <summary>
        /// Test whether AuthoringToolId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAuthoringToolId()
        {
            return !string.IsNullOrEmpty(AuthoringToolId);
        }

        /// <summary>
        /// Test whether IfcGuid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIfcGuid()
        {
            return !string.IsNullOrEmpty(IfcGuid);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Component object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Component object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Component object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Component obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Component);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Component obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Component Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Component)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Component Deserialize(System.IO.Stream s)
        {
            return ((Component)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Component object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Component object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Component object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Component obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Component);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Component obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Component LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ComponentColoringColor
    {

        #region Private fields
        private List<Component> _component;

        private string _color;

        private static XmlSerializer serializer;
        #endregion

        [System.Xml.Serialization.XmlElementAttribute("Component")]
        public List<Component> Component
        {
            get
            {
                return this._component;
            }
            set
            {
                this._component = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "normalizedString")]
        public string Color
        {
            get
            {
                return this._color;
            }
            set
            {
                this._color = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ComponentColoringColor));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Component should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComponent()
        {
            return Component != null && Component.Count > 0;
        }

        /// <summary>
        /// Test whether Color should be serialized
        /// </summary>
        public virtual bool ShouldSerializeColor()
        {
            return !string.IsNullOrEmpty(Color);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ComponentColoringColor object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ComponentColoringColor object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ComponentColoringColor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ComponentColoringColor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ComponentColoringColor);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ComponentColoringColor obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ComponentColoringColor Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ComponentColoringColor)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ComponentColoringColor Deserialize(System.IO.Stream s)
        {
            return ((ComponentColoringColor)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ComponentColoringColor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ComponentColoringColor object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ComponentColoringColor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ComponentColoringColor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ComponentColoringColor);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ComponentColoringColor obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ComponentColoringColor LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class VisualizationInfoBitmap
    {

        #region Private fields
        private bool _shouldSerializeBitmap;

        private bool _shouldSerializeHeight;

        private BitmapFormat _bitmap;

        private string _reference;

        private Point _location;

        private Direction _normal;

        private Direction _up;

        private double _height;

        private static XmlSerializer serializer;
        #endregion

        public BitmapFormat Bitmap
        {
            get
            {
                return this._bitmap;
            }
            set
            {
                this._bitmap = value;
                _shouldSerializeBitmap = true;
            }
        }

        public string Reference
        {
            get
            {
                return this._reference;
            }
            set
            {
                this._reference = value;
            }
        }

        public Point Location
        {
            get
            {
                return this._location;
            }
            set
            {
                this._location = value;
            }
        }

        public Direction Normal
        {
            get
            {
                return this._normal;
            }
            set
            {
                this._normal = value;
            }
        }

        public Direction Up
        {
            get
            {
                return this._up;
            }
            set
            {
                this._up = value;
            }
        }

        public double Height
        {
            get
            {
                return this._height;
            }
            set
            {
                this._height = value;
                _shouldSerializeHeight = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(VisualizationInfoBitmap));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Height should be serialized
        /// </summary>
        public virtual bool ShouldSerializeHeight()
        {
            if (_shouldSerializeHeight)
            {
                return true;
            }
            return (_height != default(double));
        }

        /// <summary>
        /// Test whether Bitmap should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBitmap()
        {
            if (_shouldSerializeBitmap)
            {
                return true;
            }
            return (_bitmap != default(BitmapFormat));
        }

        /// <summary>
        /// Test whether Location should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLocation()
        {
            return (_location != null);
        }

        /// <summary>
        /// Test whether Normal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNormal()
        {
            return (_normal != null);
        }

        /// <summary>
        /// Test whether Up should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUp()
        {
            return (_up != null);
        }

        /// <summary>
        /// Test whether Reference should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReference()
        {
            return !string.IsNullOrEmpty(Reference);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VisualizationInfoBitmap object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an VisualizationInfoBitmap object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output VisualizationInfoBitmap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VisualizationInfoBitmap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfoBitmap);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out VisualizationInfoBitmap obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static VisualizationInfoBitmap Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((VisualizationInfoBitmap)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static VisualizationInfoBitmap Deserialize(System.IO.Stream s)
        {
            return ((VisualizationInfoBitmap)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current VisualizationInfoBitmap object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an VisualizationInfoBitmap object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VisualizationInfoBitmap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VisualizationInfoBitmap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfoBitmap);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out VisualizationInfoBitmap obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static VisualizationInfoBitmap LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    public enum BitmapFormat
    {

        /// <remarks/>
        PNG,

        /// <remarks/>
        JPG,
    }
}
#pragma warning restore
